import { Component, Input, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

var Stroke = /** @class */ (function () {
    function Stroke(fill, strokeFill, dashArray, thickness, opacity) {
        this.fill = fill != null ? fill : 'transparent';
        this.strokeFill = strokeFill != null ? strokeFill : 'black';
        this.dashArray = dashArray != null ? dashArray : 0;
        this.thickness = thickness != null ? thickness : 1;
        this.opacity = opacity != null ? opacity : 1;
    }
    return Stroke;
}());
var Vertex = /** @class */ (function () {
    function Vertex() {
        this.x = 0;
        this.y = 0;
    }
    return Vertex;
}());
var Polygon = /** @class */ (function () {
    function Polygon() {
        this.vertices = new Array();
    }
    return Polygon;
}());
var Polyline = /** @class */ (function () {
    function Polyline() {
        this.vertices = new Array();
    }
    return Polyline;
}());
var SvgCircleComponent = /** @class */ (function () {
    function SvgCircleComponent() {
        this.circleMousedown = new EventEmitter();
    }
    SvgCircleComponent.prototype.ngOnInit = function () {
        if (!this.circle.stroke) {
            this.circle.stroke = new Stroke();
        }
    };
    SvgCircleComponent.prototype.onCircleMouseDown = function ($event) {
        if ($event) {
            this.circleMousedown.emit({ mouseEvent: $event, circle: this.circle });
        }
    };
    return SvgCircleComponent;
}());
SvgCircleComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-circle]',
                template: "<svg:circle [attr.cx]=\"circle?.cx\"\n            [attr.cy]=\"circle?.cy\"\n            [attr.r]=\"circle?.r\"\n            [attr.stroke]=\"circle?.stroke?.strokeFill\"\n            [attr.stroke-dasharray]=\"circle?.stroke?.dashArray\"\n            [attr.stroke-width]=\"circle?.stroke?.thickness\"\n            [attr.fill]=\"circle?.stroke?.fill\"\n            vector-effect=\"non-scaling-stroke\"\n            [attr.stroke-opacity]=\"circle?.stroke?.opacity\"\n            (mousedown)=\"onCircleMouseDown($event)\"></svg:circle>",
                styles: [""]
            },] },
];
SvgCircleComponent.ctorParameters = function () { return []; };
SvgCircleComponent.propDecorators = {
    "circle": [{ type: Input },],
    "circleMousedown": [{ type: Output },],
};
var SvgCircleModule = /** @class */ (function () {
    function SvgCircleModule() {
    }
    return SvgCircleModule;
}());
SvgCircleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgCircleComponent],
                exports: [SvgCircleComponent]
            },] },
];
SvgCircleModule.ctorParameters = function () { return []; };
var SvgLineComponent = /** @class */ (function () {
    function SvgLineComponent() {
        this.lineMousedown = new EventEmitter();
    }
    SvgLineComponent.prototype.ngOnInit = function () {
        if (!this.line.stroke) {
            this.line.stroke = new Stroke();
        }
    };
    SvgLineComponent.prototype.onLineMouseDown = function ($event) {
        if ($event) {
            this.lineMousedown.emit({ mouseEvent: $event, line: this.line });
        }
    };
    return SvgLineComponent;
}());
SvgLineComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-line]',
                template: "<svg:line [attr.x1]=\"line?.x1\"\n          [attr.y1]=\"line?.y1\"\n          [attr.x2]=\"line?.x2\"\n          [attr.y2]=\"line?.y2\"\n          [attr.fill]=\"line?.stroke?.fill\"\n          [attr.stroke]=\"line?.stroke?.strokeFill\"\n          [attr.stroke-dasharray]=\"line?.stroke?.dashArray\"\n          [attr.stroke-width]=\"line?.stroke?.thickness\"\n          [attr.stroke-opacity]=\"line?.stroke?.opacity\"\n          (mousedown)=\"onLineMouseDown($event)\" />",
                styles: [""]
            },] },
];
SvgLineComponent.ctorParameters = function () { return []; };
SvgLineComponent.propDecorators = {
    "line": [{ type: Input },],
    "lineMousedown": [{ type: Output },],
};
var SvgLineModule = /** @class */ (function () {
    function SvgLineModule() {
    }
    return SvgLineModule;
}());
SvgLineModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgLineComponent],
                exports: [SvgLineComponent]
            },] },
];
SvgLineModule.ctorParameters = function () { return []; };
var SvgPolygonComponent = /** @class */ (function () {
    function SvgPolygonComponent() {
        this.pointsString = null;
        this.polygonMousedown = new EventEmitter();
    }
    SvgPolygonComponent.prototype.ngOnInit = function () {
        if (this.polygon) {
            this.pointsString = this.getPolyPoints(this.polygon.vertices);
        }
        if (!this.polygon.stroke) {
            this.polygon.stroke = new Stroke();
        }
    };
    SvgPolygonComponent.prototype.getPolyPoints = function (points) {
        return points.map(function (p) { return p.x.toString() + ' ' + p.y.toString(); }).join(' ');
    };
    SvgPolygonComponent.prototype.onPolygonMouseDown = function ($event) {
        if ($event) {
            this.polygonMousedown.emit({ mouseEvent: $event, polygon: this.polygon });
        }
    };
    return SvgPolygonComponent;
}());
SvgPolygonComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-polygon]',
                template: "<svg:polygon [attr.stroke]=\"polygon?.stroke?.strokeFill\"\n             [attr.fill]=\"polygon?.stroke?.fill\"\n             [attr.stroke-opacity]=\"polygon?.stroke?.opacity\"\n             [attr.stroke-dasharray]=\"polygon?.stroke?.dashArray\"\n             [attr.stroke-width]=\"polygon?.stroke?.thickness\"\n             [attr.points]=\"pointsString\"\n             vector-effect=\"non-scaling-stroke\"\n             (click)=\"onPolygonMouseDown($event)\">\n</svg:polygon>",
                styles: [""]
            },] },
];
SvgPolygonComponent.ctorParameters = function () { return []; };
SvgPolygonComponent.propDecorators = {
    "polygon": [{ type: Input },],
    "polygonMousedown": [{ type: Output },],
};
var SvgPolygonModule = /** @class */ (function () {
    function SvgPolygonModule() {
    }
    return SvgPolygonModule;
}());
SvgPolygonModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgPolygonComponent],
                exports: [SvgPolygonComponent]
            },] },
];
SvgPolygonModule.ctorParameters = function () { return []; };
var SvgPolylineComponent = /** @class */ (function () {
    function SvgPolylineComponent() {
        this.pointsString = null;
        this.polylineMousedown = new EventEmitter();
    }
    SvgPolylineComponent.prototype.ngOnInit = function () {
        if (this.polyline) {
            this.pointsString = this.getPolyPoints(this.polyline.vertices);
        }
        if (!this.polyline.stroke) {
            this.polyline.stroke = new Stroke();
        }
    };
    SvgPolylineComponent.prototype.getPolyPoints = function (points) {
        return points.map(function (p) { return p.x.toString() + ' ' + p.y.toString(); }).join(' ');
    };
    SvgPolylineComponent.prototype.onPolylineMouseDown = function (event) {
        if (event) {
            this.polylineMousedown.emit({ mouseEvent: event, polyline: this.polyline });
        }
    };
    return SvgPolylineComponent;
}());
SvgPolylineComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-polyline]',
                template: "<svg:polyline [attr.stroke]=\"polyline?.stroke?.strokeFill\"\n             [attr.fill]=\"polyline?.stroke?.fill\"\n             [attr.stroke-opacity]=\"polyline?.stroke?.opacity\"\n             [attr.stroke-dasharray]=\"polyline?.stroke?.dashArray\"\n             [attr.stroke-width]=\"polyline?.stroke?.thickness\"\n             [attr.points]=\"pointsString\"\n             vector-effect=\"non-scaling-stroke\"\n             (mousedown)=\"onPolylineMouseDown($event)\">\n</svg:polyline>",
                styles: [""]
            },] },
];
SvgPolylineComponent.ctorParameters = function () { return []; };
SvgPolylineComponent.propDecorators = {
    "polyline": [{ type: Input },],
    "polylineMousedown": [{ type: Output },],
};
var SvgPolylineModule = /** @class */ (function () {
    function SvgPolylineModule() {
    }
    return SvgPolylineModule;
}());
SvgPolylineModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgPolylineComponent],
                exports: [SvgPolylineComponent]
            },] },
];
SvgPolylineModule.ctorParameters = function () { return []; };
var SvgTextComponent = /** @class */ (function () {
    function SvgTextComponent() {
    }
    SvgTextComponent.prototype.ngOnInit = function () {
    };
    return SvgTextComponent;
}());
SvgTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-text]',
                template: "<svg:text [attr.transform]=\"transform\"\n          [attr.x]=\"x\"\n          [attr.y]=\"y\"\n          [attr.fill]=\"fontStyle?.fontFill\"\n          [attr.font-family]=\"fontStyle?.fontFamily\"\n          [attr.font-size]=\"fontStyle?.fontSize\"\n          [attr.font-weight]=\"fontStyle?.fontWeight\"\n          [attr.font-style]=\"fontStyle?.fontStyle\"\n          dominant-baseline=\"central\"\n          text-anchor=\"middle\">\n          <ng-content></ng-content>\n</svg:text>",
                styles: [""]
            },] },
];
SvgTextComponent.ctorParameters = function () { return []; };
SvgTextComponent.propDecorators = {
    "x": [{ type: Input },],
    "y": [{ type: Input },],
    "transform": [{ type: Input },],
    "fontStyle": [{ type: Input },],
};
var SvgTextModule = /** @class */ (function () {
    function SvgTextModule() {
    }
    return SvgTextModule;
}());
SvgTextModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgTextComponent],
                exports: [SvgTextComponent]
            },] },
];
SvgTextModule.ctorParameters = function () { return []; };
var SvgPathComponent = /** @class */ (function () {
    function SvgPathComponent() {
    }
    SvgPathComponent.prototype.ngOnInit = function () {
        if (!this.stroke) {
            this.stroke = new Stroke();
        }
    };
    return SvgPathComponent;
}());
SvgPathComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-path]',
                template: "<svg:path [attr.d]=\"path\"\n          [attr.stroke]=\"stroke?.strokeFill\"\n          [attr.stroke-dasharray]=\"stroke?.dashArray\"\n          [attr.stroke-width]=\"stroke?.thickness\"\n          [attr.fill]=\"stroke?.fill\"\n          vector-effect=\"non-scaling-stroke\"\n          [attr.stroke-opacity]=\"stroke?.opacity\"></svg:path>",
                styles: [""]
            },] },
];
SvgPathComponent.ctorParameters = function () { return []; };
SvgPathComponent.propDecorators = {
    "path": [{ type: Input },],
    "stroke": [{ type: Input },],
};
var SvgPathModule = /** @class */ (function () {
    function SvgPathModule() {
    }
    return SvgPathModule;
}());
SvgPathModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgPathComponent],
                exports: [SvgPathComponent]
            },] },
];
SvgPathModule.ctorParameters = function () { return []; };
var SvgRectComponent = /** @class */ (function () {
    function SvgRectComponent() {
        this.rectangleMousedown = new EventEmitter();
    }
    SvgRectComponent.prototype.ngOnInit = function () {
        if (!this.rectangle.stroke) {
            this.rectangle.stroke = new Stroke();
        }
    };
    SvgRectComponent.prototype.onRectangleMouseDown = function ($event) {
        if ($event) {
            this.rectangleMousedown.emit({ mouseEvent: $event, rectangle: this.rectangle });
        }
    };
    return SvgRectComponent;
}());
SvgRectComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-rect]',
                template: "<svg:rect [attr.x]=\"rectangle?.x\"\n          [attr.y]=\"rectangle?.y\"\n          [attr.stroke]=\"rectangle?.stroke?.strokeFill\"\n          [attr.stroke-dasharray]=\"rectangle?.stroke?.dashArray\"\n          [attr.stroke-width]=\"rectangle?.stroke?.thickness\"\n          [attr.fill]=\"rectangle?.stroke?.fill\"\n          vector-effect=\"non-scaling-stroke\"\n          [attr.stroke-opacity]=\"rectangle?.stroke?.opacity\"\n          (mousedown)=\"onRectangleMouseDown($event)\"></svg:rectangle>",
                styles: [""]
            },] },
];
SvgRectComponent.ctorParameters = function () { return []; };
SvgRectComponent.propDecorators = {
    "rectangle": [{ type: Input },],
    "rectangleMousedown": [{ type: Output },],
};
var SvgrectModule = /** @class */ (function () {
    function SvgrectModule() {
    }
    return SvgrectModule;
}());
SvgrectModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgRectComponent],
                exports: [SvgRectComponent]
            },] },
];
SvgrectModule.ctorParameters = function () { return []; };
var SvgEllipseComponent = /** @class */ (function () {
    function SvgEllipseComponent() {
        this.ellipseMousedown = new EventEmitter();
    }
    SvgEllipseComponent.prototype.ngOnInit = function () {
        if (!this.ellipse.stroke) {
            this.ellipse.stroke = new Stroke();
        }
    };
    SvgEllipseComponent.prototype.onEllipseMouseDown = function ($event) {
        if ($event) {
            this.ellipseMousedown.emit({ mouseEvent: $event, ellipse: this.ellipse });
        }
    };
    return SvgEllipseComponent;
}());
SvgEllipseComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[svg-ellipse]',
                template: "<svg:ellipse [attr.cx]=\"ellipse?.cx\"\n             [attr.cy]=\"ellipse?.cy\"\n             [attr.rx]=\"ellipse?.rx\"\n             [attr.ry]=\"ellipse?.ry\"\n             [attr.stroke]=\"ellipse?.stroke?.strokeFill\"\n             [attr.stroke-dasharray]=\"ellipse?.stroke?.dashArray\"\n             [attr.stroke-width]=\"ellipse?.stroke?.thickness\"\n             [attr.fill]=\"ellipse?.stroke?.fill\"\n             vector-effect=\"non-scaling-stroke\"\n             [attr.stroke-opacity]=\"ellipse?.stroke?.opacity\"\n             (mousedown)=\"onEllipseMouseDown($event)\"></svg:ellipse>",
                styles: [""]
            },] },
];
SvgEllipseComponent.ctorParameters = function () { return []; };
SvgEllipseComponent.propDecorators = {
    "ellipse": [{ type: Input },],
    "ellipseMousedown": [{ type: Output },],
};
var SvgEllipseModule = /** @class */ (function () {
    function SvgEllipseModule() {
    }
    return SvgEllipseModule;
}());
SvgEllipseModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [SvgEllipseComponent],
                exports: [SvgEllipseComponent]
            },] },
];
SvgEllipseModule.ctorParameters = function () { return []; };

export { SvgCircleModule, SvgLineModule, SvgPolygonModule, SvgPolylineModule, SvgTextModule, SvgPathModule, SvgrectModule, SvgEllipseModule, Stroke, Vertex, Polygon, Polyline, SvgCircleComponent as ɵa, SvgEllipseComponent as ɵh, SvgLineComponent as ɵb, SvgPathComponent as ɵf, SvgPolygonComponent as ɵc, SvgPolylineComponent as ɵd, SvgRectComponent as ɵg, SvgTextComponent as ɵe };
//# sourceMappingURL=angular-svg.js.map
