{
  "version": 3,
  "file": "angular-svg.umd.js",
  "sources": [
    "ng://angular-svg/out/src/app/modules/svgellipse/svgellipse.module.ts",
    "ng://angular-svg/out/src/app/modules/svgellipse/svgellipse.component.ts",
    "ng://angular-svg/out/src/app/modules/svgrect/svgrect.module.ts",
    "ng://angular-svg/out/src/app/modules/svgrect/svgrect.component.ts",
    "ng://angular-svg/out/src/app/modules/svgpath/svgpath.module.ts",
    "ng://angular-svg/out/src/app/modules/svgpath/svgpath.component.ts",
    "ng://angular-svg/out/src/app/modules/svgtext/svgtext.module.ts",
    "ng://angular-svg/out/src/app/modules/svgtext/svgtext.component.ts",
    "ng://angular-svg/out/src/app/modules/svgpolyline/svgpolyline.module.ts",
    "ng://angular-svg/out/src/app/modules/svgpolyline/svgpolyline.component.ts",
    "ng://angular-svg/out/src/app/modules/svgpolygon/svgpolygon.module.ts",
    "ng://angular-svg/out/src/app/modules/svgpolygon/svgpolygon.component.ts",
    "ng://angular-svg/out/src/app/modules/svgline/svgline.module.ts",
    "ng://angular-svg/out/src/app/modules/svgline/svgline.component.ts",
    "ng://angular-svg/out/src/app/modules/svgcircle/svgcircle.module.ts",
    "ng://angular-svg/out/src/app/modules/svgcircle/svgcircle.component.ts",
    "ng://angular-svg/out/src/app/types/polyline.model.ts",
    "ng://angular-svg/out/src/app/types/polygon.model.ts",
    "ng://angular-svg/out/src/app/types/vertex.model.ts",
    "ng://angular-svg/out/src/app/types/stroke.model.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgEllipseComponent } from './svgellipse.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgEllipseComponent],\n  exports: [SvgEllipseComponent]\n})\nexport class SvgEllipseModule { }\n",
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Ellipse, ElementEventClick, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-ellipse]',\n  template: `<svg:ellipse [attr.cx]=\"ellipse?.cx\"\n             [attr.cy]=\"ellipse?.cy\"\n             [attr.rx]=\"ellipse?.rx\"\n             [attr.ry]=\"ellipse?.ry\"\n             [attr.stroke]=\"ellipse?.stroke?.strokeFill\"\n             [attr.stroke-dasharray]=\"ellipse?.stroke?.dashArray\"\n             [attr.stroke-width]=\"ellipse?.stroke?.thickness\"\n             [attr.fill]=\"ellipse?.stroke?.fill\"\n             vector-effect=\"non-scaling-stroke\"\n             [attr.stroke-opacity]=\"ellipse?.stroke?.opacity\"\n             (mousedown)=\"onEllipseMouseDown($event)\"></svg:ellipse>`,\n  styles: [``]\n})\nexport class SvgEllipseComponent implements OnInit {\n\n\n  constructor() { }\n\n\n  @Input()\n  public ellipse: Ellipse;\n\n  @Output()\n  public ellipseMousedown = new EventEmitter<{ mouseEvent: MouseEvent, ellipse: Ellipse }>();\n\n  ngOnInit() {\n\n    if (!this.ellipse.stroke) {\n      this.ellipse.stroke = new Stroke();\n    }\n  }\n\n  public onEllipseMouseDown($event) {\n    if ($event) {\n      this.ellipseMousedown.emit({ mouseEvent: $event, ellipse: this.ellipse });\n    }\n\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgRectComponent } from './svgrect.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgRectComponent],\n  exports: [SvgRectComponent]\n})\nexport class SvgrectModule { }\n",
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Rectangle, ElementEventClick, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-rect]',\n  template: `<svg:rect [attr.x]=\"rectangle?.x\"\n          [attr.y]=\"rectangle?.y\"\n          [attr.stroke]=\"rectangle?.stroke?.strokeFill\"\n          [attr.stroke-dasharray]=\"rectangle?.stroke?.dashArray\"\n          [attr.stroke-width]=\"rectangle?.stroke?.thickness\"\n          [attr.fill]=\"rectangle?.stroke?.fill\"\n          vector-effect=\"non-scaling-stroke\"\n          [attr.stroke-opacity]=\"rectangle?.stroke?.opacity\"\n          (mousedown)=\"onRectangleMouseDown($event)\"></svg:rectangle>`,\n  styles: [``]\n})\nexport class SvgRectComponent implements OnInit {\n\n\n  constructor() { }\n\n\n  @Input()\n  public rectangle: Rectangle;\n\n  @Output()\n  public rectangleMousedown = new EventEmitter<{ mouseEvent: MouseEvent, rectangle: Rectangle }>();\n\n  ngOnInit() {\n    if (!this.rectangle.stroke) {\n      this.rectangle.stroke = new Stroke();\n    }\n  }\n\n  public onRectangleMouseDown($event) {\n    if ($event) {\n      this.rectangleMousedown.emit({ mouseEvent: $event, rectangle: this.rectangle });\n    }\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgPathComponent } from './svgpath.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgPathComponent],\n  exports: [SvgPathComponent]\n})\nexport class SvgPathModule { }\n",
    "import { Component, OnInit, Input } from '@angular/core';\nimport { Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-path]',\n  template: `<svg:path [attr.d]=\"path\"\n          [attr.stroke]=\"stroke?.strokeFill\"\n          [attr.stroke-dasharray]=\"stroke?.dashArray\"\n          [attr.stroke-width]=\"stroke?.thickness\"\n          [attr.fill]=\"stroke?.fill\"\n          vector-effect=\"non-scaling-stroke\"\n          [attr.stroke-opacity]=\"stroke?.opacity\"></svg:path>`,\n  styles: [``]\n})\nexport class SvgPathComponent implements OnInit {\n\n  constructor() { }\n\n\n  @Input()\n  public path: string;\n\n  @Input()\n  public stroke: Stroke;\n\n  ngOnInit() {\n    if (!this.stroke) {\n      this.stroke = new Stroke();\n    }\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgTextComponent } from './svgtext.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgTextComponent],\n  exports: [SvgTextComponent]\n})\nexport class SvgTextModule { }\n",
    "import { Component, OnInit, Input } from '@angular/core';\nimport { TextFont} from '../../types';\n\n@Component({\n  selector: 'g[svg-text]',\n  template: `<svg:text [attr.transform]=\"transform\"\n          [attr.x]=\"x\"\n          [attr.y]=\"y\"\n          [attr.fill]=\"fontStyle?.fontFill\"\n          [attr.font-family]=\"fontStyle?.fontFamily\"\n          [attr.font-size]=\"fontStyle?.fontSize\"\n          [attr.font-weight]=\"fontStyle?.fontWeight\"\n          [attr.font-style]=\"fontStyle?.fontStyle\"\n          dominant-baseline=\"central\"\n          text-anchor=\"middle\">\n          <ng-content></ng-content>\n</svg:text>`,\n  styles: [``]\n})\nexport class SvgTextComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  public x: number;\n\n  @Input()\n  public y: number;\n\n  @Input()\n  public transform: number;\n\n  @Input()\n  public fontStyle: TextFont;\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgPolylineComponent } from './svgpolyline.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgPolylineComponent],\n  exports: [SvgPolylineComponent]\n})\nexport class SvgPolylineModule { }\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Polyline, Vertex, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-polyline]',\n  template: `<svg:polyline [attr.stroke]=\"polyline?.stroke?.strokeFill\"\n             [attr.fill]=\"polyline?.stroke?.fill\"\n             [attr.stroke-opacity]=\"polyline?.stroke?.opacity\"\n             [attr.stroke-dasharray]=\"polyline?.stroke?.dashArray\"\n             [attr.stroke-width]=\"polyline?.stroke?.thickness\"\n             [attr.points]=\"pointsString\"\n             vector-effect=\"non-scaling-stroke\"\n             (mousedown)=\"onPolylineMouseDown($event)\">\n</svg:polyline>`,\n  styles: [``]\n})\nexport class SvgPolylineComponent implements OnInit {\n\n  private pointsString: string = null;\n  constructor() { }\n\n  @Input()\n  public polyline: Polyline;\n\n  @Output()\n  public polylineMousedown = new EventEmitter<{ mouseEvent: MouseEvent, polyline: Polyline }>();\n\n  ngOnInit() {\n    if (this.polyline) {\n      this.pointsString = this.getPolyPoints(this.polyline.vertices);\n    }\n    if (!this.polyline.stroke) {\n       this.polyline.stroke = new Stroke();\n    }\n  }\n\n  private getPolyPoints(points: Vertex[]): string {\n    return points.map(p => p.x.toString() + ' ' + p.y.toString()).join(' ');\n  }\n\n  public onPolylineMouseDown(event): void {\n    if (event) {\n      this.polylineMousedown.emit({ mouseEvent: event, polyline: this.polyline });\n    }\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgPolygonComponent } from './svgpolygon.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgPolygonComponent],\n  exports: [SvgPolygonComponent]\n})\nexport class SvgPolygonModule { }\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Polygon, Vertex, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-polygon]',\n  template: `<svg:polygon [attr.stroke]=\"polygon?.stroke?.strokeFill\"\n             [attr.fill]=\"polygon?.stroke?.fill\"\n             [attr.stroke-opacity]=\"polygon?.stroke?.opacity\"\n             [attr.stroke-dasharray]=\"polygon?.stroke?.dashArray\"\n             [attr.stroke-width]=\"polygon?.stroke?.thickness\"\n             [attr.points]=\"pointsString\"\n             vector-effect=\"non-scaling-stroke\"\n             (click)=\"onPolygonMouseDown($event)\">\n</svg:polygon>`,\n  styles: [``]\n})\nexport class SvgPolygonComponent implements OnInit {\n\n  private pointsString: string = null;\n  constructor() { }\n\n  @Input()\n  public polygon: Polygon;\n\n  @Output()\n  public polygonMousedown = new EventEmitter<{ mouseEvent: MouseEvent, polygon: Polygon }>();\n\n\n  ngOnInit() {\n    if (this.polygon) {\n      this.pointsString = this.getPolyPoints(this.polygon.vertices);\n    }\n    if (!this.polygon.stroke) {\n      this.polygon.stroke = new Stroke();\n    }\n  }\n\n  private getPolyPoints(points: Vertex[]): string {\n    return points.map(p => p.x.toString() + ' ' + p.y.toString()).join(' ');\n  }\n\n  public onPolygonMouseDown($event: any): void {\n    if ($event) {\n      this.polygonMousedown.emit({ mouseEvent: $event, polygon: this.polygon });\n    }\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgLineComponent } from './svgline.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgLineComponent],\n  exports: [SvgLineComponent]\n})\nexport class SvgLineModule { }\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Line, Stroke } from '../../types';\n\n@Component({\n  selector: 'g[svg-line]',\n  template: `<svg:line [attr.x1]=\"line?.x1\"\n          [attr.y1]=\"line?.y1\"\n          [attr.x2]=\"line?.x2\"\n          [attr.y2]=\"line?.y2\"\n          [attr.fill]=\"line?.stroke?.fill\"\n          [attr.stroke]=\"line?.stroke?.strokeFill\"\n          [attr.stroke-dasharray]=\"line?.stroke?.dashArray\"\n          [attr.stroke-width]=\"line?.stroke?.thickness\"\n          [attr.stroke-opacity]=\"line?.stroke?.opacity\"\n          (mousedown)=\"onLineMouseDown($event)\" />`,\n  styles: [``]\n})\nexport class SvgLineComponent implements OnInit {\n\n\n\n  constructor() { }\n\n\n  @Input()\n  public line: Line;\n\n  @Output()\n  public lineMousedown = new EventEmitter<{ mouseEvent: MouseEvent, line: Line }>();\n\n  ngOnInit() {\n    if (!this.line.stroke) {\n      this.line.stroke = new Stroke();\n    }\n  }\n\n  public onLineMouseDown($event): void {\n    if ($event) {\n      this.lineMousedown.emit({ mouseEvent: $event, line: this.line });\n    }\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgCircleComponent } from './svgcircle.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SvgCircleComponent],\n  exports: [SvgCircleComponent]\n})\nexport class SvgCircleModule { }\n",
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { Circle, ElementEventClick, Stroke } from '../../types';\r\n\r\n@Component({\r\n  selector: 'g[svg-circle]',\r\n  template: `<svg:circle [attr.cx]=\"circle?.cx\"\r\n            [attr.cy]=\"circle?.cy\"\r\n            [attr.r]=\"circle?.r\"\r\n            [attr.stroke]=\"circle?.stroke?.strokeFill\"\r\n            [attr.stroke-dasharray]=\"circle?.stroke?.dashArray\"\r\n            [attr.stroke-width]=\"circle?.stroke?.thickness\"\r\n            [attr.fill]=\"circle?.stroke?.fill\"\r\n            vector-effect=\"non-scaling-stroke\"\r\n            [attr.stroke-opacity]=\"circle?.stroke?.opacity\"\r\n            (mousedown)=\"onCircleMouseDown($event)\"></svg:circle>`,\r\n  styles: [``]\r\n})\r\nexport class SvgCircleComponent implements OnInit {\r\n\r\n\r\n  constructor() { }\r\n\r\n\r\n  @Input()\r\n  public circle: Circle;\r\n\r\n  @Output()\r\n  public circleMousedown = new EventEmitter<{ mouseEvent: MouseEvent, circle: Circle }>();\r\n\r\n  ngOnInit() {\r\n    if (!this.circle.stroke) {\r\n      this.circle.stroke = new Stroke();\r\n    }\r\n  }\r\n\r\n  public onCircleMouseDown($event) {\r\n    if ($event) {\r\n      this.circleMousedown.emit({ mouseEvent: $event, circle: this.circle });\r\n    }\r\n  }\r\n}\r\n",
    "import { Stroke } from './stroke.model';\r\nimport { Vertex } from './vertex.model';\r\n\r\nexport class Polyline {\r\n    public vertices: Vertex[];\r\n    stroke: Stroke;\r\n    constructor() {\r\n        this.vertices = new Array<Vertex>();\r\n    }\r\n}\r\n",
    "import { Stroke } from './stroke.model';\r\nimport { Vertex } from './vertex.model';\r\n\r\nexport class Polygon {\r\n    public vertices: Vertex[];\r\n    stroke: Stroke;\r\n    constructor() {\r\n        this.vertices = new Array<Vertex>();\r\n    }\r\n}\r\n",
    "export class Vertex {\r\n    public x: number;\r\n    public y: number;\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n}\r\n",
    "export class Stroke {\r\n    public fill: string;\r\n    public strokeFill: string;\r\n    public dashArray: number;\r\n    public stroke_linecap: string;\r\n    public thickness: number;\r\n    public opacity: number;\r\n\r\n    constructor(fill?: string, strokeFill?: string, dashArray?: number, thickness?: number, opacity?: number) {\r\n\r\n        this.fill = fill != null ? fill : 'transparent';\r\n        this.strokeFill = strokeFill != null ? strokeFill : 'black';\r\n        this.dashArray = dashArray != null ? dashArray : 0;\r\n        this.thickness = thickness != null ? thickness : 1;\r\n        this.opacity = opacity != null ? opacity : 1;\r\n    }\r\n}\r\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Output",
    "Input",
    "Component",
    "EventEmitter"
  ],
  "mappings": "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"
}
